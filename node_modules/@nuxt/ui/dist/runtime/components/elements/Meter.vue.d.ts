import type { SlotsType, PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    value: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    indicator: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: null;
    };
    size: {
        type: PropType<"sm" | "md" | "xs" | "2xs" | "lg" | "xl" | "2xl">;
        default: () => any;
        validator(value: string): boolean;
    };
    color: {
        type: PropType<any>;
        default: () => any;
        validator(value: string): boolean;
    };
    icon: {
        type: StringConstructor;
        default: null;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    ui: {
        type: PropType<Partial<any>>;
        default: undefined;
    };
}, {
    ui: import("vue").ComputedRef<any>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    indicatorContainerClass: import("vue").ComputedRef<string>;
    indicatorClass: import("vue").ComputedRef<string>;
    meterClass: import("vue").ComputedRef<string>;
    meterAppearanceClass: import("vue").ComputedRef<string>;
    meterBarClass: import("vue").ComputedRef<string>;
    labelClass: import("vue").ComputedRef<string>;
    normalizedMin: import("vue").ComputedRef<number>;
    normalizedMax: import("vue").ComputedRef<number>;
    percent: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    indicator: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: null;
    };
    size: {
        type: PropType<"sm" | "md" | "xs" | "2xs" | "lg" | "xl" | "2xl">;
        default: () => any;
        validator(value: string): boolean;
    };
    color: {
        type: PropType<any>;
        default: () => any;
        validator(value: string): boolean;
    };
    icon: {
        type: StringConstructor;
        default: null;
    };
    class: {
        type: PropType<any>;
        default: undefined;
    };
    ui: {
        type: PropType<Partial<any>>;
        default: undefined;
    };
}>>, {
    icon: string;
    color: any;
    ui: Partial<any>;
    class: any;
    value: number;
    label: string;
    size: "sm" | "md" | "xs" | "2xs" | "lg" | "xl" | "2xl";
    max: number;
    min: number;
    indicator: boolean;
}, SlotsType<{
    indicator?: {
        percent: number;
        value: number;
    } | undefined;
    label?: {
        percent: number;
        value: number;
    } | undefined;
}>>;
export default _default;
